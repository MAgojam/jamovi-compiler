
# This file is automatically generated, you probably don't want to edit this

<%= analysis.name %>Options <- if (requireNamespace('jmvcore')) R6::R6Class(
    "<%= analysis.name %>Options",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
                if (typeof(option['default']) === 'undefined')
                    return '\n            ' + option.name + ' = NULL,';
                return '\n            ' + option.name + ' = ' + imports.sourcifyOption(option['default']) + ',';
            }).join('')
            %> ...) {

            super$initialize(
                package='<%= packageName %>',
                name='<%= analysis.name %>',
                requiresData=<%= analysis.options.filter(o => o.type === 'Data').length !== 0 ? 'TRUE' : 'FALSE' %>,
                ...)
<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
                return '\n            private$..' + option.name + ' <- ' + imports.optionify(option);
                }).join('')
            %>
<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
                return '\n            self$.addOption(private$..' + option.name + ')';
                }).join('')
            %>
        }),
    active = list(<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
        return '\n        ' + option.name + ' = function() private$..' + option.name + '$value'
        }).join()
    %>),
    private = list(<%=analysis.options.filter(o => o.type !== 'Data').map(option => {
        return '\n        ..' + option.name + ' = NA';
        }).join()
    %>)
)

<%= analysis.name %>Results <- if (requireNamespace('jmvcore')) <%= imports.resultsify(results, '', true) %>

<%= analysis.name %>Base <- if (requireNamespace('jmvcore')) R6::R6Class(
    "<%= analysis.name %>Base",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = '<%= packageName %>',
                name = '<%= analysis.name %>',
                version = c(<%= analysis.version.split('.').join(',') %>),
                options = options,
                results = <%= analysis.name %>Results$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = <%= imports.sourcifyResults(analysis.pause ? analysis.pause : null, '            ')%>,
                completeWhenFilled = <%= analysis.completeWhenFilled ? 'TRUE' : 'FALSE' %>,
                requiresMissings = <%= (analysis.options.length > 0 && analysis.options[0].type === 'Data' && analysis.options[0].requiresMissings) ? 'TRUE' : 'FALSE' %>)
        }))
<% if (analysis.export !== false) { %>
#' <%= analysis.title %>
#'
<%= (analysis.description.main || '').replace(/`(.*?)`/g, '\\code{$1}').split('\n').map(line => {
        line = imports.asciify(line);
        return imports.wrap(line, { indent: "#' ", width: 75 })
    }).join("\n")
%><%
    if (analysis.description && analysis.description.R && analysis.description.R.usage) {
        var usage = analysis.description.R.usage;
        usage = imports.asciify(usage);
        usage = usage.split('\n').join("\n#' ");
        usage = usage.split('\n').map(s => s.trimRight()).join('\n');  // trim trailing whitespace
        print("\n#'\n#' @examples\n#' ");
        if (analysis.description.R.dontrun !== false)
            print("\\dontrun{\n#' ");
        print(usage);
        if (analysis.description.R.dontrun !== false)
            print("}");
    }
%><%
    if (analysis.description && analysis.description.references) {
        print("\n#' @section References:")
        var refs = analysis.description.references;
        for (var i = 0; i < refs.length; i++) {
            var desc = refs[i];
            print("\n#' " + desc + "\n#'");
        }
    }
%>
<%= analysis.options.filter(o => o.type !== 'Output').map(option => {
    var desc;
    desc = option.description;
    if (typeof desc === 'object')
        desc = desc.R;
    if (desc === undefined)
        desc = '.';
    desc = '@param ' + option.name + ' ' + desc;
    desc = desc.replace(/\s/g, ' ');
    desc = desc.replace(/`(.*?)`/g, '\\code{$1}');
    desc = imports.asciify(desc);
    desc = imports.wrap(desc, { indent: "#'   ", width: 75 });
    desc = desc.replace('  @param', '@param');
    desc = desc.split('\n').map(s => s.trimRight()).join('\n');  // trim trailing whitespace
    return desc;
    }).join('\n') %><%= analysis.formula ? "\n#' @param formula (optional) the formula to use, see the examples" : '' %>
<%
if (results.items) {
    print("#' @return A results object containing:\n");
    print("#' \\tabular{llllll}{\n");

    var firstTable;
    var firstArray;

    for (var i = 0; i < results.items.length; i++) {
        var element = results.items[i];

        var desc;
        var type;

        if (element.type === 'Group') {
            for (var j = 0; j < element.items.length; j++) {
                var sub = element.items[j];
                desc = sub.description;

                type = sub.type;
                if (type.match(/^[AEIOUaeiou]/))
                    type = 'an ' + type.toLowerCase();
                else
                    type = 'a ' + type.toLowerCase();

                if (desc === undefined)
                    desc = type;
                desc = imports.asciify(desc);
                print("#'   \\code{results$" + element.name + '$' + sub.name + '} \\tab \\tab \\tab \\tab \\tab ' + desc + ' \\cr\n');
            }
        }
        else if (element.type === 'Array') {

            desc = element.description;
            if ( ! desc)
                desc = 'an array of ' + element.template.type.toLowerCase() + 's';
            desc = imports.asciify(desc);
            print("#'   \\code{results$" + element.name + '} \\tab \\tab \\tab \\tab \\tab ' + desc + ' \\cr\n');
        }
        else {
            desc = element.description;

            type = element.type;

            if (type === 'Table' && ! firstTable)
                firstTable = element.name;
            else if (type === 'Array')
                firstArray = element.name;

            if (type.match(/^[AEIOUaeiou]/))
                type = 'an ' + type.toLowerCase();
            else
                type = 'a ' + type.toLowerCase();

            if (desc === undefined)
                desc = type;

            desc = imports.asciify(desc);
            desc = desc.replace(/`(.*?)`/g, '\\code{$1}');

            print("#'   \\code{results$" + element.name + '} \\tab \\tab \\tab \\tab \\tab ' + desc + ' \\cr\n');
        }
    }
    print("#' }\n");
    print("#'\n");

    if (firstTable) {
        print("#' Tables can be converted to data frames with \\code{asDF} or \\code{\\link{as.data.frame}}. For example:\n")
        print("#'\n");
        print("#' \\code{results$" + firstTable + "$asDF}\n")
        print("#'\n");
        print("#' \\code{as.data.frame(results$" + firstTable + ")}\n");
        print("#'\n");
    }

    if (firstArray) {
        print("#' Elements in arrays can be accessed with [[n]]. For example:\n")
        print("#'\n");
        print("#' \\code{results$" + firstArray + "[[1]] # accesses the first element}\n")
        print("#'\n");
    }
}
%>#' @export
<%= analysis.rename ? analysis.rename : analysis.name %> <- function(<%=analysis.options.filter(o => o.type !== 'Output').map(option => {
    if (_.isUndefined(option['default']))
        return '\n    ' + option.name;
    return '\n    ' + option.name + ' = ' + imports.sourcifyOption(option['default']);
}).join()
%><%= analysis.formula ? ',\n    formula' : '' %>) {

    if ( ! requireNamespace('jmvcore'))
        stop('<%= analysis.rename ? analysis.rename : analysis.name %> requires jmvcore to be installed (restart may be required)')
<% if (analysis.formula) {
    print('\n    if ( ! missing(formula)) {')
    for (var name in analysis.formula) {
        var marsh = analysis.formula[name];
        print('\n        if (missing(' + name + '))')
        if (marsh.custom) {
            print('\n            ' + name + ' <- ' + analysis.name + 'Class$private_methods$.marshalFormula(')
            print('\n                formula=formula,')
            print('\n                data=`if`( ! missing(data), data, NULL),')
            print('\n                name="' + name + '"')
        }
        else {
            print('\n            ' + name + ' <- jmvcore::marshalFormula(')
            print('\n                formula=formula,')
            print('\n                data=`if`( ! missing(data), data, NULL)')
            for (var part in marsh) {
                var v = marsh[part];
                if (v === true)
                    v = 'TRUE'
                else if (v === false)
                    v = 'FALSE'
                else
                    v = "'" + v + "'";
                print(',\n                ' + part + '=' + v);
            }
        }
        print(')')
    }
    print('\n    }\n')
} %><%=analysis.options.filter(o => o.type.startsWith('Variable')).map(option => {
        return '\n    if ( ! missing(' + option.name + ')) ' + option.name + ' <- jmvcore::resolveQuo(jmvcore::enquo(' + option.name + '))'
    }).join('')
%><% if (analysis.options.filter(o => o.type === 'Data').length !== 0) { %>
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame()<%=analysis.options.filter(o => o.type === 'Variable' || o.type === 'Variables').map(option => {
                    return ',\n            `if`( ! missing(' + option.name + '), ' + option.name + ', NULL)';
                }).join('')%>)
<%=analysis.options.filter(o => o.takeFromDataIfMissing === true).map(option => {
        return '\n    ' + option.name + ' <- `if`( ! missing(' + option.name + '), ' + option.name + ', colnames(data))';
    }).join()
%><%=analysis.options.filter(o => o.type.startsWith('Variable') && _.isEqual(o.permitted, ['factor'])).map(option => {
        return '\n    for (v in ' + option.name + ') if (v %in% names(data)) data[[v]] <- as.factor(data[[v]])';
    }).join('')
%><%=analysis.options.filter(o => o.type === 'Terms' || (o.type === 'Array' && o.template.type === 'Variables')).map(option => {
        return '\n    if (inherits(' + option.name + ', \'formula\')) ' + option.name + ' <- jmvcore::decomposeFormula(' + option.name + ')';
    }).join('')
%><% } %>

    options <- <%= analysis.name %>Options$new(<%=analysis.options.filter(o => o.type !== 'Data' && o.type !== 'Output').map(option => {
        return '\n        ' + option.name + ' = ' + option.name;
    }).join()
    %>)

    analysis <- <%= analysis.name %>Class$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}
<% } // if (analysis.export) %>